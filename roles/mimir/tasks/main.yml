---
# tasks file for mimir
- name: Set architecture specific variables
  ansible.builtin.set_fact:
    arch: "{{ 'arm64' if ansible_architecture == 'aarch64' else 'amd64' }}"

- name: Get latest version of Traefik
  community.general.github_release:
    user: grafana
    repo: mimir
    action: latest_release
  register: mimir_version_latest_gh
  run_once: true
  delegate_to: localhost
  when: mimir_version == "latest"

- name: Set Mimir version facts
  ansible.builtin.set_fact:
    mimir_version_latest: "{{ mimir_version_latest_gh.tag | regex_replace('^mimir-', '', count=1) }}"
  when: mimir_version == "latest"

- name: Verify current deployed version
  block:
    - name: Check if Mimir binary is present
      ansible.builtin.stat:
        path: "/usr/local/bin/mimir"
      register: __already_deployed

    - name: Obtain current deployed mimir version
      ansible.builtin.command:
        cmd: "//usr/local/bin/mimir --version"
      changed_when: false
      register: __current_deployed_version
      when: __already_deployed.stat.exists | bool

- name: Set Mimir download url base
  ansible.builtin.set_fact:
    mimir_deb_url_base: "https://github.com/grafana/mimir/releases/download/mimir-{{ mimir_version_latest }}"

- name: Set Mimir version facts
  ansible.builtin.set_fact:
    mimir_deb_url_base: "https://github.com/grafana/mimir/releases/download/mimir-{{ mimir_version_latest }}"
    mimir_deb_packages:
      - "{{ mimir_deb_url_base }}/mimir-{{ mimir_version_latest }}_{{ arch }}.deb"
      - "{{ mimir_deb_url_base }}/metaconvert_{{ mimir_version_latest }}_{{ arch }}.deb"
      - "{{ mimir_deb_url_base }}/mimirtool_{{ mimir_version_latest }}_{{ arch }}.deb"
      - "{{ mimir_deb_url_base }}/query-tee_{{ mimir_version_latest }}_{{ arch }}.deb"

- name: APT - Install Mimir and components
  ansible.builtin.apt:
    deb: "{{ item }}"
    state: present
  with_items: "{{ mimir_deb_packages }}"
  notify: restart mimir
  when: __current_deployed_version.stdout is not defined or mimir_version not in __current_deployed_version.stdout

- name: Check if Mimir default dir is present
  ansible.builtin.stat:
    path: "/tmp/mimir/boltdb-shipper-active"
  register: __default_structure

- name: Default structure cleanup
  when: __default_structure.stat.exists | bool
  block:
    - name: Ensure that Mimir is stopped before default cleanup
      ansible.builtin.systemd:
        name: mimir.service
        state: stopped

    - name: Remove default configuration from "/tmp/mimir" directory
      ansible.builtin.file:
        path: "/tmp/mimir"
        state: absent


- name: Ensure that Mimir working path exists
  ansible.builtin.file:
    path: "{{ mimir_working_path }}"
    state: directory
    owner: "mimir"
    group: "mimir"
    mode: "0755"

- name: Ensure that Mimir rule path exists
  ansible.builtin.file:
    path: "{{ mimir_working_path }}/rules"
    state: directory
    owner: "mimir"
    group: "mimir"
    mode: "0755"

- name: Ensure that Mimir compactor path exists
  ansible.builtin.file:
    path: "{{ mimir_working_path }}/compactor"
    state: directory
    owner: "mimir"
    group: "mimir"
    mode: "0755"

- name: Ensure that Mimir sync path exists
  ansible.builtin.file:
    path: "{{ mimir_working_path }}/tsdb-sync"
    state: directory
    owner: "mimir"
    group: "mimir"
    mode: "0755"

- name: Ensure that Mimir storage path exists
  ansible.builtin.file:
    path: "{{ mimir_working_path }}/tsdb"
    state: directory
    owner: "mimir"
    group: "mimir"
    mode: "0755"

- name: Template Mimir config - /etc/mimir/config.yml
  ansible.builtin.template:
    src: "config.yml.j2"
    dest: "/etc/mimir/config.yml"
    owner: "mimir"
    group: "mimir"
    mode: "0644"
    validate: "mimir -modules --config.file=%s"
  notify:
    - Restart mimir

- name: Ensure that Mimir is started
  ansible.builtin.systemd:
    name: mimir.service
    state: started
    enabled: true

- name: Verify that Mimir URL is responding
  ansible.builtin.uri:
    url: "http://127.0.0.1:{{ mimir_http_listen_port }}/ready"
    method: GET
  register: mimir_verify_url_status_code
  retries: 5
  delay: 8
  until: mimir_verify_url_status_code.status == 200
